#!/usr/bin/env python

from __future__ import print_function

import decimal
import sys, os
import subprocess, shlex

# Ability to provide preference in environment for default command
try:
    default_command = os.environ['ITUNESPY_DEFAULT_COMMAND']
except KeyError:
    default_command = 'playpause'

# Mapping of custom commands
commands = {
    'n': 'next',
    'next': 'next track',

    'p': 'previous',
    'prev': 'previous',
    'previous': 'previous track',

    's': 'skip',
    'skip': 'next track',

    'ff': 'fast forward',
    'rw': 'rewind',

    'r': 'rate',
    'rate': 'set the rating of current track to {0}',
}

def process_rating_args(args):
    """ Processes args specific for rating commands. """

    if len(args) > 1:
        raise ValueError('Only one argument allowed for ratings.')

    value = args[0]

    if len(value) > 2 and value[0] in ['=', 'e']:
        value = decimal.Decimal(value[1:])
    else:
        value = decimal.Decimal(value) * 20

    return [value]

arg_processors = {
    'to set the rating of current track to {0}': process_rating_args
}

# Base command for sending signals to iTunes
base_command = "osascript -e 'tell application \"iTunes\" {0}'"

unknown_command_error = 'The variable {0} is not defined.'
unknown_error = "An unexpected iTunes error occured. Details are as follows:\n{0}"

# Is this command being provided as raw AppleScript, or do we have an alias
# defined for it?
command_is_raw = False

# Figure out what base command is being requested
if len(sys.argv) > 1:
    command_name = sys.argv[1].lower()

    # Revert to a raw command being provided if no defined alias
    if not command_name in commands:
        command_name = sys.argv[1:]
        command_is_raw = True

else:
    command_name = default_command

# Apply any aliases possible. These are recursive.
while command_name in commands:
    command_name = commands[command_name]

# Attempt to get any args to pass to the command
if len(sys.argv) > 2:
    command_args = sys.argv[2:]
else:
    command_args = []

# Prepend 'to' if it is not yet there
if not command_name.startswith('to '):
    command_name = 'to {0}'.format(command_name)

if command_name in arg_processors:
    command_args = arg_processors[command_name](command_args)

# Format the generated command into the base command template
command = base_command.format(command_name.format(*command_args))
process = subprocess.Popen(shlex.split(command),
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)

# Wait for the script to execute so that we can check the return code and
# display an error if necessary. If cliTunes stalls here, it is most likely
# because iTunes is frozen.
return_code = process.wait()

if return_code != 0:
    error = process.stderr.read()
    unknown_command = unknown_command_error.format(command_name)

    if unknown_command in error:
        print('{0} is an unsupported command.'.format(command_name), file=sys.stderr)
    else:
        print(unknown_error.format(error), file=sys.stderr)

# Exit with the same error code that came from the generated command, in case
# that is useful at all.
sys.exit(return_code)

